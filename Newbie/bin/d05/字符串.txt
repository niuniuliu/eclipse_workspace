 关于String str = "abc"的内部工作。Java内部将此语句转化为以下几个步骤： 
　　(1)先定义一个名为str的对String类的对象引用变量：String str； 
　　(2)在栈中查找有没有存放值为"abc"的地址，如果没有，则开辟一个存放字面值为"abc"的地址，接着创建一个新的String类的对象o，并将o 的字符串值指向这个地址，而且在栈中这个地址旁边记下这个引用的对象o。如果已经有了值为"abc"的地址，则查找对象o，并返回o的地址。 
　　(3)将str指向对象o的地址。 
　　值得注意的是，一般String类中字符串值都是直接存值的。但像String str = "abc"；这种场合下，其字符串值却是保存了一个指向存在栈中数据的引用！ 
  为了更好地说明这个问题，我们可以通过以下的几个代码进行验证。 

　　String str1 = "abc"; 
　　String str2 = "abc"; 
　　System.out.println(str1==str2);  //true 
  
　　注意，我们这里并不用str1.equals(str2)；的方式，因为这将比较两个字符串的值是否相等。==号，根据JDK的说明，只有在两个引用都指向了同一个对象时才返回真值。而我们在这里要看的是，str1与str2是否都指向了同一个对象。 
　　结果说明，JVM创建了两个引用str1和str2，但只创建了一个对象，而且两个引用都指向了这个对象。 

　　我们再来更进一步，将以上代码改成： 

　　String str1 = "abc"; 
　　String str2 = "abc"; 
　　str1 = "bcd"; 
　　System.out.println(str1 + "," + str2);  //bcd, abc 
　　System.out.println(str1==str2);  //false 

　　这就是说，赋值的变化导致了类对象引用的变化，str1指向了另外一个新对象！而str2仍旧指向原来的对象。上例中，当我们将str1的值改为"bcd"时，JVM发现在栈中没有存放该值的地址，便开辟了这个地址，并创建了一个新的对象，其字符串的值指向这个地址。 
　　事实上，String类被设计成为不可改变(immutable)的类。如果你要改变其值，可以，但JVM在运行时根据新值悄悄创建了一个新对象，然后将这个对象的地址返回给原来类的引用。这个创建过程虽说是完全自动进行的，但它毕竟占用了更多的时间。在对时间要求比较敏感的环境中，会带有一定的不良影响。 

　　再修改原来代码： 

　　String str1 = "abc"; 
　　String str2 = "abc"; 
  
　　str1 = "bcd"; 
  
　　String str3 = str1; 
　　System.out.println(str3);  //bcd 

　　String str4 = "bcd"; 
　　System.out.println(str1 == str4);  //true 
    
　　str3 这个对象的引用直接指向str1所指向的对象(注意，str3并没有创建新对象)。当str1改完其值后，再创建一个String的引用str4，并指向因str1修改值而创建的新的对象。可以发现，这回str4也没有创建新的对象，从而再次实现栈中数据的共享。 

　　我们再接着看以下的代码。 

　　String str1 = new String("abc"); 
　　String str2 = "abc"; 
　　System.out.println(str1==str2);  //false 

　　创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。 

　　String str1 = "abc"; 
　　String str2 = new String("abc"); 
　　System.out.println(str1==str2);  //false 

　　创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。 

　　以上两段代码说明，只要是用new()来新建对象的，都会在堆中创建，而且其字符串是单独存值的，即使与栈中的数据相同，也不会与栈中的数据共享。 

