1.类的定义
抽象的概念,一个类就是一个class文件,也就是一个.java文件
在类中可以加入属性和方法,如果你定义的这些属性和方法被其他的类调用,需要创建该类的对象,
并通过对象来调用其中的方法和属性,比如
车 奔驰 = new 车();
奔驰.拐弯();

类的定义如下:

public class 车 {

	车(){
	
	}

	String 颜色 = "红色";
	
	public void 拐弯(){
		System.out.println("forward............");
	}
	
	public void 后倒(){
		
	}
	
	/**
	 * 入口方法
	 *有入口方法，程序就可以独立运行
	 *程序运行时，只会找一个方法，就是main
	 * @param args
	 */
	public static void main(String[] args){
		
	}
	
}

类：（静态的）就是一个文件或声明，是属性（数据）和方法的声明体

对象：（动态的）就是内存当中的一个空间

引用：指向对象的地址，并通过其能对这个该对象进行操作

2.方法的声明
在一个类中,可以有多个属性,也可以有多个方法
main方法是主入口,我们可以加我们自己的方法
	/**
	 * 这是一个方法
	 * test1为方法名
	 * ()代表这个方法的参数列表
	 *public 表示访问控制符
	 *void是方法的返回值
	 *{}表示语句体
	 */
	public void test1(int i,String s){
		System.out.println("ttttttttttt");
	}

3.方法的调用
车 奔驰 = new 车();
奔驰.拐弯();
奔驰.颜色 = "红色";


4.变量类型
全局变量(成员变量):属性,直接位于类的里面
局部变量:不直接位于类的里面,可能在方法内或语句块内被声明的


5.变量初始化
局部变量在使用之前必须被初始化
全局变量如果没有初始化,系统会默认赋予一个默认值


6.参数定义
我们可以为一个方法定义一个或多个参数,在方法内部,可以直接使用这些参数
那么,在方法被调用的时候,必须要为被调用的方法提供适当的参数

	public void test(String str,int abc){
		System.out.println(str);
	}
	
	public static void main(String[] args){
		
		TestD t = new TestD();
		t.test("123",5989);
	}


7.值传递
在java中,通过参数传递给方法的值,在方法内部都可以直接使用,如果在方法内容对该值
做出相应的改变,对原始值不会产生任何的影响

	public void test(String s,int k){
		s = s+"tttttttt";
		k = k*1000;
		System.out.println(s+":"+k);
	}
	
	public static void main(String[] args){
		
		TestD t = new TestD();
		String s = "123";
		int k = 5989;
		t.test(s,k);
		System.out.println(s+":"+k);
	}

8。构造函数
构造函数是一个特殊的函数（方法）应该有（）
构造函数也被称为：
构造方法
构造子
构造器


每个类都一个隐含的无参数构造方法
构造函数的目的：为了创建对象
怎么样使用构造函数来创建：
new + 构造函数
TestB t = new TestB();

规则：
A。构造函数没有返回值，连void都不能写
public TestB(){
}

B。构造函数的名称和类的名称相同


隐含构造器的问题：
当一个没有定义任何的构造函数时，系统会默认提供一个无参数的构造器
如果自己定义过构造函数，系统默认的构造器将不再提供


9.java源程序的结构
通常会包含以下部分
A.包的定义
B.引入类
C.类的定义

包定义的目的
A.类非常多,需要分门别类的存放
B.更利于分工,比如张三对数据库比较熟悉,那它就可以只是负责db包中相关代码的开发
C.避免类的重名的问题 

包中文件使用的问题
类在被编译的时候,默认情况下,系统会在该类的当前目录下搜索需要使用到的类的class文件,
如果找不到该class文件,系统编译将会出错
你可以使用import语句来引入其他包中的文件


包使用规则:
A.package语句必须位于代码的最前面,其后才能使import语句,import语句之后才可以是class定义语句
B.包的层次是相对于当前项目而言的
C.包的层次使用原点符号来表示org.nitpro.demo

import的定义
使用import引入不同包中的类
使用.*的符号,表示引入某个包下的所有的编译后文件,但不包括子包
	

10,命名惯例：
包名:所有字母小写，如org.nitpro.demo;
类名:每首字母大写,比如Date,TestA
方法名:首字母小写,后面所有单词首字母大写,如getUserName()
变量名:同方法名,如String strUserName;
常量名:所有字母均大写


11。Date类    java.util包下
   所以在程序开始加import java.util.*;
   date.getTime(); 用来获取自1970年以来的毫秒数。


12。理解
A. class Circle{ 
      Point o;
      int r;
    }

B. int distance(Point p){
    }
 引用也是变量，它是用来操作对象的。

C. class Complex{
   Complex add(){}     }
  add方法的返回值是一个对象（地址信息）











